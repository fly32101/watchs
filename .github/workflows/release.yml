name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  goreleaser:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Debug directory structure
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents (root):"
          ls -la
          echo "All directories:"
          find . -type d | sort
          echo "All Go files:"
          find . -name "*.go" | sort
          echo "All main.go files:"
          find . -name "main.go" | sort

      - name: Find and use main.go
        run: |
          # 查找所有main.go文件
          MAIN_FILES=$(find . -name "main.go" | sort)
          
          if [ -z "$MAIN_FILES" ]; then
            echo "Error: No main.go files found in the repository."
            exit 1
          fi
          
          # 输出找到的所有main.go文件
          echo "Found main.go files:"
          echo "$MAIN_FILES"
          
          # 尝试找到cmd/watchs/main.go
          if [ -f "cmd/watchs/main.go" ]; then
            echo "Found cmd/watchs/main.go - using this file"
            MAIN_FILE="cmd/watchs/main.go"
          else
            # 如果找不到cmd/watchs/main.go，使用找到的第一个main.go
            MAIN_FILE=$(echo "$MAIN_FILES" | head -n 1)
            echo "cmd/watchs/main.go not found, using first main.go: $MAIN_FILE"
          
            # 创建cmd/watchs目录（如果不存在）
            mkdir -p cmd/watchs
          
            # 复制找到的main.go到cmd/watchs/main.go
            cp "$MAIN_FILE" cmd/watchs/main.go
            echo "Copied $MAIN_FILE to cmd/watchs/main.go"
          fi
          
          echo "Content of main.go to be used:"
          cat cmd/watchs/main.go

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}